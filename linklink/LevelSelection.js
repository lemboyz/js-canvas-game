const emoji = {
    bug: ['üêû','üêå','ü¶ã','üêõ','üêú','üêù','ü¶ó','üï∑Ô∏è','üï∏Ô∏è','ü¶Ç','ü¶ü','ü¶†'],
    vegetable: ['üçÜ','üçÖ','ü•î','ü•ï','üåΩ','üå∂Ô∏è','ü•í','ü•¨','ü•¶','üßÑ','üßÖ'],
    zodiacanimal: ['üêÅ','üêÇ','üêÖ','üêá','üêâ','üêç','üêé','üêê','üêí','üêì','üêï','üêñ'],
    resort: ['üèúÔ∏è','üåã','üèñÔ∏è','üèùÔ∏è','üèõÔ∏è','üè∞','üõï','‚õ©Ô∏è','üë∫','üóø','üóº','üóΩ','üèØ'],
    mahjong: ['üÄÑ','üé≤','üÄ®','üÄ•','üÄß','üÄ£','üÄ¢','üÄ¶','üÄ©','üÄ§','üÄ™','üÉè','üîÆ','üé¥'],

    sweet: ['üç¶','üçß','üç®','üç©','üç™','üéÇ','üç∞','üßÅ','ü•ß','üç´','üç¨','üç≠','üçÆ','üçØ'],
    home: ['üö™','üöΩ','üöø','üõÅ','üõí','üßØ','üß¥','üß∑','üßπ','üß∫','üßª','üßº','üßΩ','ü™ë','ü™í'],
    office: ['üìå','üíº','üìÅ','üìÖ','üìÜ','üìá','üìà','üìâ','üìä','üìç','üìé','üìè','üìê','üîë','üîí','üîí'],
    bird: ['ü¶â','ü¶Ü','üêß','üê¶','ü¶©','üêì','ü¶ö','ü¶ú','ü¶¢','ü¶Ö','üïäÔ∏è','üê£','üê§','üêî','ü¶É','üê•'],
    music: ['üéª','üéß','üéº','üéπ','üéµ','üé∂','ü™ï','üé∫','ü•Å','üé∑','üé∏','üìØ','üé§','üéôÔ∏è','üîî','üìª'],

    drink: ['üçº','ü•õ','‚òï','üçµ','üç∂','üçæ','üç∑','üç∏','üçπ','üç∫','üçª','ü•Ç','ü•É','ü•§','üßÉ','üßâ','üßä'],
    fish: ['üê¨','ü¶à','üêü','üê†','üê°','üê¢','üêã','üê≥','üêô','üêö','ü¶Ä','ü¶û','ü¶ê','ü¶ë','üêä','üêâ','ü¶™'],
    fruit: ['üçá','üçà','üçâ','üçä','üçã','üçå','üçç','ü•≠','üçé','üçè','üçê','üçë','üçí','üçì','ü•ù','ü••','ü•ë'],
    animal: ['ü¶®','ü¶î','üê´','üê™','ü¶å','üêà','ü¶ß','ü¶ç','üêï‚Äçü¶∫','ü¶ô','üêè','üêÜ','üß∏','üêò','üêøÔ∏è','üêÑ','ü¶ò'],
    heart: ['üíò','üíù','üíñ','üíû','üíï','‚ù£Ô∏è','üíî','üíü','üß°','üíõ','üíö','üíô','üíú','ü§é','üñ§','ü§ç','‚ô†Ô∏è','‚ô¶Ô∏è','‚ô£Ô∏è'],

    animalface: ['üôâ','üôä','üê∂','üê∫','üò∏','üòπ','üòª','üêØ','üêÆ','üê∑','üêó','üê≠','üêπ','üê∞','üêª','üê®','üêº','üê∏'],
    weather: ['‚õÖ','‚òÅÔ∏è','‚õàÔ∏è','üå§Ô∏è','üå¶Ô∏è','üåßÔ∏è','üå©Ô∏è','üå™Ô∏è','üåÄ','üå´Ô∏è','üå¨Ô∏è','üåà','‚òÇÔ∏è','‚òî','‚õ±','üåÇ','‚ö°','‚ùÑÔ∏è'],
    event: ['üéÉ','üéÑ','üéÜ','üéá','üß®','‚ú®','üéà','üéâ','üéä','üéã','üéç','üéé','üéè','üéê','üéë','üßß','üéÄ','üéÅ','üé´'],
    food: ['ü•ê','üçï','ü•Æ','üç§','üçº','‚òï','üç±','üå≠','ü•™','üçî','üçó','üçñ','ü•©','üßÄ','ü•ó','ü•´','üç°','üßÜ','üçü','ü•£','ü•û'],
    plant: ['üíê','üå∏','üèµÔ∏è','üåπ','ü•Ä','üå∫','üåª','üåº','üå∑','üå±','üå≤','üå≥','üå¥','üåµ','üåæ','üåø','üçÄ','üçÅ','üçÇ','üçÉ','üçÑ'],

    head: ['ü§ë','ü§†','üòà','üëø','üëπ','üë∫','ü§°','üí©','üëª','üëΩ','üëæ','ü§ñ','üéÉ','üò∫','üòª','ü•∂','ü•≥','üòÑ','ü•µ','üò¥','ü§™'],
    tool: ['‚åöÔ∏è','üì±','üì≤','üíª','‚å®Ô∏è','üíΩ','üíæ','üíø','üìÄ','üìº','üì∏','üìπ','üé•','üìû','‚òéÔ∏è','üìü','üì†','üì∫','üìª','üß≠','‚è±','‚è≤','‚è∞'],
    simple: ['üî≤','üî∂','üî∑','üî∫','üîª','üî¥','üü†','üü°','üü¢','üîµ','üü£','üü§','‚ö´','‚ö™','üü•','üüß','üü®','üü©','üü¶','üü™','üü´','‚¨õ','‚¨ú'],
    job: ['üëÆüèª‚Äç‚ôÄÔ∏è','üëÆüèª','üë∑üèª‚Äç‚ôÄÔ∏è','üë∑üèª','üíÇüèª‚Äç‚ôÄÔ∏è','üïµüèª','üë©üèª‚Äç‚öïÔ∏è','üë©üèª‚Äçüåæ','üë©üèª‚Äçüç≥','üë©üèª‚Äçüéì','üë©üèª‚Äçüé§','üë©üèª‚Äçüè´','üë©üèª‚Äçüè≠','üë©üèª‚Äçüíª','üë©üèª‚Äçüíº','üë©üèª‚Äçüîß','üë©üèª‚Äçüî¨','üë©üèª‚Äçüé®','üë©üèª‚Äçüöí','üë®üèª‚Äç‚úàÔ∏è','üë©üèª‚ÄçüöÄ','üë®üèª‚Äç‚öñÔ∏è','üë∞üèª','ü§µüèª','ü§¥üèª'],
    ghost: ['üßùüèª‚Äç‚ôÄÔ∏è','üßùüèª','üë∏','ü§¥','ü¶∏','ü¶∏‚Äç‚ôÇÔ∏è','ü¶π','ü¶π‚Äç‚ôÇÔ∏è','ü§∂','üßë','üéÖ','üßô‚Äç‚ôÄÔ∏è','üßô‚Äç‚ôÇÔ∏è','üßù‚Äç‚ôÄÔ∏è','üßù','üßù‚Äç‚ôÇÔ∏è','üßõ','üßü‚Äç‚ôÄÔ∏è','üßü','üßû‚Äç‚ôÄÔ∏è','üßû','üßú','üßú‚Äç‚ôÇÔ∏è','üßö','üßö‚Äç‚ôÇÔ∏è','üëº'],

    vehicle: ['üöô','üöÅ','üöå','üöù','üöï','üöú','üöë','üöö','üöñ','üèéÔ∏è','üöÉ','üöì','üöó','üöä','üöí','‚õΩ','üö∏','üëÆ','üëÆ‚Äç‚ôÄÔ∏è','üõ∫','üõ¥','üõµ','üèçÔ∏è','üö¶','üö•','üöß'],
    cloth: ['üëì','üï∂Ô∏è','ü•Ω','ü•º','ü¶∫','üëî','üëï','üëñ','üß§','üß•','üß¶','üëó','üëò','ü•ª','ü©±','ü©≥','üëô','üëö','üëü','ü•ø','üëû','üë†','üë°','üë¢','üëí','üéì','üíç'],
    sport: ['‚öæ','üéØ','ü§∏‚Äç‚ôÄÔ∏è','ü§∏‚Äç‚ôÇÔ∏è','üèåÔ∏è‚Äç‚ôÄÔ∏è','üèåÔ∏è','üèá','‚õ∑Ô∏è','ü•á','ü•à','ü•â','üèê','üö≤','üèÜ','üö¥','ü•è','‚õ∏Ô∏è','ü§º','ü•ä','üèãÔ∏è','üèä‚Äç‚ôÄÔ∏è','üèà','üèÄ','‚öΩ','ü•é','üé≥','üèì','üè∏'],
    body: ['üëã','üñê','üññ','üëå','ü§ü','üëÜ','üëá','üëç','üëé','üëä','üëè','üôå','üôè','üíÖ','ü§≥','üí™','ü¶µ','ü¶∂','üë£','ü¶ª','üëÉ','üß†','ü¶∑','ü¶¥','üëÄ','üëÖ','üëÑ','üíã'],
    ball: ['üåç','üåê','üåë','üåí','üåì','üåî','üåï','üåñ','üåó','üåò','üåù','üèê','üèÄ','‚öΩ','ü•é','‚öæ','üéÉ','üç™','üìÄ','üîµ','üòÑ','üçä','üéØ','üß≠']
}

// ÈÄâÂÖ≥ÁïåÈù¢
class LevelSelection {
    constructor() {
        this.visible = true
        this.levelBlocks = this.createLevelBlocks()
        this.selectedLevel = null
    }
    loadMaxPassedLevel() {
        let maxPassedLevel = localStorage.getItem('maxPassedLevel')
        if (maxPassedLevel) {
            maxPassedLevel = parseInt(maxPassedLevel)
        } else {
            maxPassedLevel = 0
        }
        return maxPassedLevel
    }
    saveMaxPassedLevel() {
        if (this.selectedLevel > this.loadMaxPassedLevel()) {
            localStorage.setItem('maxPassedLevel', this.selectedLevel)
        }
    }
    createLevelBlocks() {
        const levelData = [
            [emoji.bug         ,'sounds/bgm/1.mp3'],
            [emoji.vegetable   ,'sounds/bgm/2.mp3'],
            [emoji.zodiacanimal,'sounds/bgm/3.mp3'],
            [emoji.resort      ,'sounds/bgm/4.mp3'],
            [emoji.mahjong     ,'sounds/bgm/5.mp3'],

            [emoji.sweet       ,'sounds/bgm/6.mp3'],
            [emoji.home        ,'sounds/bgm/7.mp3'],
            [emoji.office      ,'sounds/bgm/8.mp3'],
            [emoji.bird        ,'sounds/bgm/9.mp3'],
            [emoji.music       ,'sounds/bgm/10.mp3'],

            [emoji.drink       ,'sounds/bgm/11.mp3'],
            [emoji.fish        ,'sounds/bgm/12.mp3'],
            [emoji.fruit       ,'sounds/bgm/13.mp3'],
            [emoji.animal      ,'sounds/bgm/14.mp3'],
            [emoji.heart       ,'sounds/bgm/15.mp3'],

            [emoji.animalface  ,'sounds/bgm/16.mp3'],
            [emoji.weather     ,'sounds/bgm/17.mp3'],
            [emoji.event       ,'sounds/bgm/18.mp3'],
            [emoji.food        ,'sounds/bgm/19.mp3'],
            [emoji.plant       ,'sounds/bgm/20.mp3'],

            [emoji.head        ,'sounds/bgm/21.mp3'],
            [emoji.tool        ,'sounds/bgm/22.mp3'],
            [emoji.simple      ,'sounds/bgm/23.mp3'],
            [emoji.job         ,'sounds/bgm/24.mp3'],
            [emoji.ghost       ,'sounds/bgm/25.mp3'],

            [emoji.vehicle     ,'sounds/bgm/26.mp3'],
            [emoji.cloth       ,'sounds/bgm/27.mp3'],
            [emoji.sport       ,'sounds/bgm/28.mp3'],
            [emoji.body        ,'sounds/bgm/29.mp3'],
            [emoji.ball        ,'sounds/bgm/30.mp3'],
        ]
        let levelBlocks = []
        let initX = 80
        let initY = 80
        let size = 80
        let n = 0
        for (let i=0; i<levelData.length; i++) {
            let x = initX + size*(i%5)*2
            let y = initY + +size*(Math.floor(i/5.0))*2
            let b = new LevelBlock(n, x, y, size, levelData[i][0], levelData[i][1], this)
            n += 1
            levelBlocks.push(b)
        }
        return levelBlocks
    }
    draw() {
        if (!this.visible) {return}
        // console.log('LevelSelection draw()')
        
        this.levelBlocks.forEach(b => {
            b.draw()
        })
    }
    update() {
        if (!this.visible) {return}
        // console.log('LevelSelection update()')
        this.levelBlocks.forEach(b => {
            b.update()
        })
    }
}

class LevelBlock {
    constructor(n, x, y, size, emoji_array, bgm, parent_pointer) {
        // console.log(`x:${x}, y:${y}, size:${size}, emoji_array:${emoji_array}, bgm:${bgm}`)
        this.n = n
        this.x = x
        this.y = y
        this.size = size
        this.emoji_array = emoji_array
        this.current_emoji = this.emoji_array[0]
        this.current_idx = 0
        this.bgm = bgm
        this.passed = false // Êú¨ÂÖ≥ÊòØÂê¶Â∑≤ÈÄöËøá
        this.elapsedTime = 0
        this.parent_pointer = parent_pointer
        this.sparkParticles = []
    }
    centerX() {
        return this.x + this.size/2
    }
    centerY() {
        return this.y + this.size/2
    }
    isValid() {
        return this.n <= 1 || (this.n-1 == this.parent_pointer.loadMaxPassedLevel()) || this.n<=this.parent_pointer.loadMaxPassedLevel()
    }
    draw() {
        if(!this.parent_pointer.visible) {return}
        ctx.save()
        
        ctx.translate(this.centerX(), this.centerY())
        if (this.isValid() && this.isUnderMouse()) {
            let scaleSize = 1 + Math.sin(this.elapsedTime*0.1)*0.1
            ctx.scale(scaleSize, scaleSize)
            ctx.shadowBlur = 20
            ctx.shadowColor = 'pink'

            if (this.elapsedTime % 5 == 0) {
                // this.current_emoji = this.emoji_array[this.elapsedTime % this.emoji_array.length]   
                this.current_idx = (this.current_idx + 1) % this.emoji_array.length
                this.current_emoji = this.emoji_array[this.current_idx]
            }
        }
        ctx.beginPath()
        ctx.fillStyle = this.isValid() ? "coral" : "gray"
        ctx.fillRect(-this.size/2, -this.size/2, this.size, this.size)
        ctx.fill()

        ctx.strokeStyle = 'white'
        ctx.strokeRect(-this.size/2, -this.size/2, this.size, this.size)
        ctx.stroke()

        ctx.font = "45px Georgia"
        ctx.textBaseline = 'middle'
        ctx.textAlign = 'center'
        if (!this.isValid()) {
            ctx.globalAlpha = 0.2
        }
        
        ctx.fillText(this.current_emoji, 0, 0)
        ctx.closePath()
        ctx.restore()

        if (this.isValid() && this.isUnderMouse()) {
            if (this.elapsedTime % 10 == 0) {
                const sp = new SparkParticle(this.centerX(), this.centerY(), this.current_emoji)
                this.sparkParticles.push(sp)
            }
            this.sparkParticles.forEach(obj => {
                obj.draw()
            })
        }
    }
    update() {
        if(!this.parent_pointer.visible) {return}
        this.elapsedTime += 1

        this.sparkParticles.forEach(obj => {
            obj.update()
        })
        this.sparkParticles = this.sparkParticles.filter(obj => {
            return obj.isValid()
        })
    }
    isUnderMouse() {
        if(!this.parent_pointer.visible) {return}
        let mouseX = mouse.x
        let mouseY = mouse.y
        return mouseX>this.x && 
              mouseX<this.x+this.size && 
              mouseY>this.y && 
              mouseY<this.y+this.size 
    }
    onclick() {
        if(!this.parent_pointer.visible) {return}
        if(!this.isValid()) {
            playSound('sounds/invalid.mp3')
            return
        }
        console.log(`levelBlock onclick(): this.emoji_array:${this.emoji_array}, this.bgm:${this.bgm}`)
        initGameData(createBlocks(this.emoji_array), this.bgm)
        this.parent_pointer.visible = false
        this.parent_pointer.selectedLevel = this.n
    }
}

class SparkParticle {
    constructor(x, y, emoji_value) {
        this.x = x
        this.y = y
        this.emoji_value = emoji_value

        this.velocity = {
            x: (Math.random()<0.5 ? -1 : 1) * Math.random() * 3,
            y: (Math.random()<0.5 ? -1 : 1) * Math.random() * 3
        }
        this.alpha = 1
    }
    isValid() {
        return this.alpha > 0
    }
    draw() {
        if(!this.isValid()) {return}
        ctx.restore()
        ctx.save()
        ctx.font = `45px Georgia`
        ctx.textBaseline = 'middle'
        ctx.textAlign = 'center'
        ctx.globalAlpha = this.alpha
        ctx.fillText(this.emoji_value, this.x, this.y)
        ctx.restore()
    }
    update() {
        if(!this.isValid()) {return}
        this.alpha -= 0.02
        this.x += this.velocity.x
        this.y += this.velocity.y
    }
}